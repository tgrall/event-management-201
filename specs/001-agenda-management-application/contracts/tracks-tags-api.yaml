openapi: 3.0.3
info:
  title: Tracks and Tags API
  description: API endpoints for track and tag management
  version: 1.0.0

paths:
  /tracks:
    get:
      summary: Get all tracks
      operationId: getAllTracks
      responses:
        '200':
          description: List of tracks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'

    post:
      summary: Create a new track
      operationId: createTrack
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrackRequest'
      responses:
        '201':
          description: Track created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '400':
          description: Invalid input data
        '409':
          description: Track name already exists

  /tracks/{trackId}:
    get:
      summary: Get track by ID
      operationId: getTrackById
      parameters:
        - name: trackId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Track details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '404':
          description: Track not found

    put:
      summary: Update track
      operationId: updateTrack
      parameters:
        - name: trackId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTrackRequest'
      responses:
        '200':
          description: Track updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '400':
          description: Invalid input data
        '404':
          description: Track not found
        '409':
          description: Track name already exists

    delete:
      summary: Delete track
      operationId: deleteTrack
      parameters:
        - name: trackId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Track deleted successfully
        '404':
          description: Track not found
        '409':
          description: Track has associated sessions

  /tags:
    get:
      summary: Get all tags
      operationId: getAllTags
      responses:
        '200':
          description: List of tags
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'

    post:
      summary: Create a new tag
      operationId: createTag
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTagRequest'
      responses:
        '201':
          description: Tag created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '400':
          description: Invalid input data
        '409':
          description: Tag name already exists

  /tags/{tagId}:
    get:
      summary: Get tag by ID
      operationId: getTagById
      parameters:
        - name: tagId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Tag details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '404':
          description: Tag not found

    delete:
      summary: Delete tag
      operationId: deleteTag
      parameters:
        - name: tagId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Tag deleted successfully
        '404':
          description: Tag not found

components:
  schemas:
    Track:
      type: object
      required:
        - id
        - name
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          maxLength: 50
          example: "Frontend Development"
        description:
          type: string
          maxLength: 500
          example: "Sessions focused on frontend technologies and best practices"
        color:
          type: string
          pattern: '^#[0-9A-Fa-f]{6}$'
          example: "#3B82F6"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateTrackRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          maxLength: 50
        description:
          type: string
          maxLength: 500
        color:
          type: string
          pattern: '^#[0-9A-Fa-f]{6}$'

    UpdateTrackRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 50
        description:
          type: string
          maxLength: 500
        color:
          type: string
          pattern: '^#[0-9A-Fa-f]{6}$'

    Tag:
      type: object
      required:
        - id
        - name
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          maxLength: 30
          example: "javascript"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateTagRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          maxLength: 30